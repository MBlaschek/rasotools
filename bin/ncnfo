#!/usr/bin/env python
import sys, os


def header(f):
    print("Dimensions: ")
    for idim in f.dimensions:
        print("       %-15s : %-8d %s" % (
            idim, f.dimensions[idim].size, '[unlimited]' if f.dimensions[idim].isunlimited() else ''))

    print("Variables: ")

    for ivar in f.variables:
        if ivar in f.dimensions:
            continue
        print("       %-25s : %-20s %-15s [%s]" % (
            ivar, ",".join(f.variables[ivar].dimensions), str(f.variables[ivar].shape),
            str(getattr(f.variables[ivar], 'units', '1'))))

    print("Attributes: ")

    for iatt in f.ncattrs():
        print("       %-15s : %s" % (iatt, f.getncattr(iatt)))


def detailed_information(f, ivar, data=False):
    if ivar in f.variables:
        print(" %-25s : %-20s %-15s [%s]" % (ivar, ",".join(f.variables[ivar].dimensions), str(f.variables[ivar].shape),
                                             str(getattr(f.variables[ivar], 'units', '1'))))
        for iatt in f.variables[ivar].ncattrs():
            print("      %-20s : %s" % (iatt, f.variables[ivar].getncattr(iatt)))  # getattr(f.variables[ivar], iatt))

        if data:
            if 'units' in f.variables[ivar].ncattrs():
                units = f.variables[ivar].getncattr('units')
                if 'since' in units:
                    calendar = f.variables[ivar].getncattr('calendar') if 'calendar' in f.variables[
                        ivar].ncattrs() else None
                    print(" %-10s : " % "Values", nc.num2date(f.variables[ivar][::], units, calendar))
            print(" %-10s : " % "Values", f.variables[ivar][::])
        else:
            print(" %-10s : " % "Values", f.variables[ivar].shape)


usage = """
 Print summary information about a netCDF file.

 usage: %s -v [var] -d [dim] -a [filename]

 -v  --variable     Print info for this variable.
 -d  --dimension    Print info for this dimension.
 -a  --array        Print array data

 netcdf filename must be last argument.
\n""" % os.path.basename(sys.argv[0])

if __name__ == '__main__':
    import getopt
    import netCDF4 as nc

    try:
        opts, pargs = getopt.getopt(sys.argv[1:], 'v:d:a', ['variable=', 'dimension='])
    except:
        (type, value, traceback) = sys.exc_info()
        sys.stdout.write("Error parsing the options. The error was: %s\n" % value)
        sys.stderr.write(usage)
        sys.exit(0)

    # Get the options
    var = None;
    dim = None;
    data = False
    for iopt, iarg in opts:
        if iopt in ('--variable', '-v'):
            var = iarg
        elif iopt in ('-a', '--array'):
            data = True
        elif iopt in ('--dimension', '-d'):
            dim = iarg

        else:
            sys.stdout.write("%s: Unrecognized option\n" % iopt)
            sys.stderr.write(usage)
            sys.exit(0)

    # filename passed as last argumenbt
    if len(pargs) == 0:
        sys.stderr.write(usage)
        sys.exit(0)

    filename = pargs[-1]

    if not os.path.isfile(filename):
        raise IOError("Unknonw file: %s" % filename)

    f = nc.Dataset(filename, 'r')

    try:
        # HEADER INFORMATION
        print("File: %s" % filename)
        header(f)
        # other variables ?
        if var is not None:
            print("Variable: ")
            detailed_information(f, var, data=data)

        if dim is not None:
            print("Dimension: ")
            detailed_information(f, dim, data=data)

        print("")

    finally:
        f.close
